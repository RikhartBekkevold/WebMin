[
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 5,
    "start": 0,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @counter-style thumbs {\r\n  system: cyclic;\r\n  symbols: \"\\1F44D\";\r\n  suffix: \" \";\r\n}\r\n\r\nul {\r\n  list-style: thumbs;\r\n}\r\n\r\n@viewport {\r\nwidth: 100vw;\r\n}\r\n\r\n@viewport {\r\n  zoom: 0.75;\r\n  min-zoom: 0.5;\r\n  max-zoom: 0.9;\r\n}\r\n\r\n\r\n@document url(\"http://www.w3.org/\"), url-prefix(\"http://www.w3.org/Style/\"), domain(\"mozilla.org\"), media-document(\"video\"), regexp(\"https:.*\") {\r\n  body {\r\n    color: purple;\r\n    background: yellow;\r\n  }\r\n}\r\n@document {\r\n  body {\r\n    cowlor: purple;\r\n    backfground: yellow;\r\n  }\r\n}\r\n\r\n\r\n@color-profile --swop5c {\r\n  src: url('https://example.org/SWOP2006_Coated5v2.icc');\r\n} */",
    "line": 5,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 83,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* this is webkit? browsers define? */",
    "line": 83,
    "start": 0,
    "end": 36
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 85,
    "start": 38,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @property --my-color {\r\n  syntax: '<color>';\r\n  inherits: false;\r\n  initial-value: #c0ffee;\r\n}\r\n\r\n\r\n@font-feature-values Font, \"tree\", Two {\r\n  @styleset {\r\n    nice-style: 4;\r\n  }\r\n}\r\n@font-feature-values Font Two {\r\n  @styleset {\r\n    nice-style: 4;\r\n  }\r\n}\r\n@font-feature-values\"Font\"\"Two\" ident Font3 {\r\n  @styleset {\r\n    nice-style: 4;\r\n  }\r\n} */",
    "line": 85,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n",
    "line": 135,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* if charset, and not start\r\nor does before toplevel just check if charst? so it can do BEFORE parse? hence WHY need to be first? if not \"\" then its wrong. not if isString   */",
    "line": 135,
    "start": 0,
    "end": 145
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 141,
    "start": 147,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* i already parse custom idnet and the variable fn? i just dont sep it? */",
    "line": 141,
    "start": 0,
    "end": 73
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 145,
    "start": 75,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* idnet = reserver/keywrod?  */",
    "line": 145,
    "start": 0,
    "end": 30
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 149,
    "start": 32,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/*\r\n@property <custom-property-name> {\r\n  <declaration-list>\r\n}\r\n\r\n\r\n\r\n.header {\r\n  background-color:   color(--swop5c 0% 70% 20% 0%);\r\n} */",
    "line": 149,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 173,
    "start": 4,
    "end": 0
  },
  {
    "type": "id",
    "val": "app3",
    "line": 173,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 173,
    "start": 5,
    "end": 6
  },
  {
    "type": "punctation",
    "val": "[",
    "line": 173,
    "start": 6,
    "end": 7
  },
  {
    "type": "ident",
    "val": "id",
    "line": 173,
    "start": 7,
    "end": 9
  },
  {
    "type": "attributeoperator",
    "val": "|=",
    "line": 173,
    "start": 9,
    "end": 10
  },
  {
    "type": "string",
    "val": "home",
    "line": 173,
    "start": 11,
    "end": 17,
    "delimiter": "\""
  },
  {
    "type": "whitespace",
    "val": "   ",
    "line": 173,
    "start": 17,
    "end": 20
  },
  {
    "type": "ident",
    "val": "s",
    "line": 173,
    "start": 20,
    "end": 21
  },
  {
    "type": "punctation",
    "val": "]",
    "line": 173,
    "start": 21,
    "end": 22
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 173,
    "start": 22,
    "end": 23
  },
  {
    "type": "punctation",
    "val": "[",
    "line": 173,
    "start": 23,
    "end": 24
  },
  {
    "type": "ident",
    "val": "id",
    "line": 173,
    "start": 24,
    "end": 26
  },
  {
    "type": "attributeoperator",
    "val": "^=",
    "line": 173,
    "start": 26,
    "end": 27
  },
  {
    "type": "string",
    "val": "home",
    "line": 173,
    "start": 28,
    "end": 34,
    "delimiter": "\""
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 173,
    "start": 34,
    "end": 35
  },
  {
    "type": "ident",
    "val": "i",
    "line": 173,
    "start": 35,
    "end": 36
  },
  {
    "type": "punctation",
    "val": "]",
    "line": 173,
    "start": 36,
    "end": 37
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 173,
    "start": 37,
    "end": 38
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 173,
    "start": 38,
    "end": 39
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 175,
    "start": 39,
    "end": 2
  },
  {
    "type": "ident",
    "val": "animation-name",
    "line": 175,
    "start": 2,
    "end": 16
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 175,
    "start": 16,
    "end": 17
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 175,
    "start": 17,
    "end": 18
  },
  {
    "type": "ident",
    "val": "slide-in",
    "line": 175,
    "start": 18,
    "end": 26
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 175,
    "start": 26,
    "end": 27
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 177,
    "start": 27,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 177,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 181,
    "start": 1,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #app2 [id s] [id~=\"home\"] [id$=\"home\"] {\r\n  animation-name: slide-in;\r\n}\r\n\r\n#app[v-cloak] {\r\n  animation: 2s slide-in;\r\n  animation-name: fade-out;\r\n}\r\n\r\n\r\n.app {\r\n  animation-name: slide-out;\r\n} */",
    "line": 181,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 209,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* it deleted this becaue of meida.. thats not safe! we must exlude if panet.type !== visite.parent.type */",
    "line": 209,
    "start": 0,
    "end": 105
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 211,
    "start": 107,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* if remove end, we will delee ALL in ast! */",
    "line": 211,
    "start": 0,
    "end": 44
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 215,
    "start": 46,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @keyframes mymode  {\r\n  frodasm  { width: 20px; }\r\n} */",
    "line": 215,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 225,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* safe to change name. problem occurs when animation name dont match. then loop should puhs, but not do something becaue if in map should exists */",
    "line": 225,
    "start": 0,
    "end": 146
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 227,
    "start": 148,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @keyframes slide-in {\r\n  from {margin: 20px;}\r\n  from {margin: 30px;}\r\n}\r\n\r\n@keyframes fade-out {\r\n  from {margin: 20px;}\r\n  from {margin: 30px;}\r\n} */",
    "line": 227,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n",
    "line": 251,
    "start": 4,
    "end": 0
  },
  {
    "type": "@",
    "val": "page",
    "line": 251,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 251,
    "start": 5,
    "end": 6
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 251,
    "start": 6,
    "end": 7
  },
  {
    "type": "whitespace",
    "val": "\r\n ",
    "line": 253,
    "start": 7,
    "end": 1
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 253,
    "start": 1,
    "end": 7
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 253,
    "start": 7,
    "end": 8
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 253,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "1",
    "line": 253,
    "start": 9,
    "end": 10,
    "isEpsilon": false,
    "isInt": true,
    "unit": "cm"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 253,
    "start": 12,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 255,
    "start": 13,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 255,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 259,
    "start": 1,
    "end": 0
  },
  {
    "type": "@",
    "val": "page",
    "line": 259,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 259,
    "start": 5,
    "end": 6
  },
  {
    "type": "ident",
    "val": "dasd",
    "line": 259,
    "start": 6,
    "end": 10
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 259,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "first",
    "line": 259,
    "start": 11,
    "end": 16
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 259,
    "start": 16,
    "end": 17
  },
  {
    "type": "ident",
    "val": "first",
    "line": 259,
    "start": 17,
    "end": 22
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 259,
    "start": 22,
    "end": 23
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 259,
    "start": 23,
    "end": 24
  },
  {
    "type": "whitespace",
    "val": "\r\n ",
    "line": 261,
    "start": 24,
    "end": 1
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 261,
    "start": 1,
    "end": 7
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 261,
    "start": 7,
    "end": 8
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 261,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "2",
    "line": 261,
    "start": 9,
    "end": 10,
    "isEpsilon": false,
    "isInt": true,
    "unit": "cm"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 261,
    "start": 12,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 263,
    "start": 13,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 263,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 267,
    "start": 1,
    "end": 0
  },
  {
    "type": "@",
    "val": "page",
    "line": 267,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 267,
    "start": 5,
    "end": 6
  },
  {
    "type": "ident",
    "val": "dasd",
    "line": 267,
    "start": 6,
    "end": 10
  },
  {
    "type": "punctation",
    "val": "[",
    "line": 267,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "dark",
    "line": 267,
    "start": 11,
    "end": 15
  },
  {
    "type": "punctation",
    "val": "]",
    "line": 267,
    "start": 15,
    "end": 16
  },
  {
    "type": "ident",
    "val": "kdak",
    "line": 267,
    "start": 16,
    "end": 20
  },
  {
    "type": "punctation",
    "val": "[",
    "line": 267,
    "start": 20,
    "end": 21
  },
  {
    "type": "ident",
    "val": "type",
    "line": 267,
    "start": 21,
    "end": 25
  },
  {
    "type": "attributeoperator",
    "val": "=",
    "line": 267,
    "start": 25,
    "end": 26
  },
  {
    "type": "string",
    "val": "text",
    "line": 267,
    "start": 26,
    "end": 32,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": "]",
    "line": 267,
    "start": 32,
    "end": 33
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 267,
    "start": 33,
    "end": 34
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 267,
    "start": 34,
    "end": 35
  },
  {
    "type": "whitespace",
    "val": "\r\n ",
    "line": 269,
    "start": 35,
    "end": 1
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 269,
    "start": 1,
    "end": 7
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 269,
    "start": 7,
    "end": 8
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 269,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "2",
    "line": 269,
    "start": 9,
    "end": 10,
    "isEpsilon": false,
    "isInt": true,
    "unit": "cm"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 269,
    "start": 12,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 271,
    "start": 13,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 271,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 275,
    "start": 1,
    "end": 0
  },
  {
    "type": "@",
    "val": "page",
    "line": 275,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 275,
    "start": 5,
    "end": 6
  },
  {
    "type": "ident",
    "val": "dasd",
    "line": 275,
    "start": 6,
    "end": 10
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 275,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "first",
    "line": 275,
    "start": 11,
    "end": 16
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 275,
    "start": 16,
    "end": 17
  },
  {
    "type": "ident",
    "val": "ab",
    "line": 275,
    "start": 17,
    "end": 19
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 275,
    "start": 19,
    "end": 20
  },
  {
    "type": "ident",
    "val": "first",
    "line": 275,
    "start": 20,
    "end": 25
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 275,
    "start": 25,
    "end": 26
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 275,
    "start": 26,
    "end": 27
  },
  {
    "type": "whitespace",
    "val": "\r\n ",
    "line": 277,
    "start": 27,
    "end": 1
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 277,
    "start": 1,
    "end": 7
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 277,
    "start": 7,
    "end": 8
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 277,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "2",
    "line": 277,
    "start": 9,
    "end": 10,
    "isEpsilon": false,
    "isInt": true,
    "unit": "cm"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 277,
    "start": 12,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 279,
    "start": 13,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 279,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 283,
    "start": 1,
    "end": 0
  },
  {
    "type": "@",
    "val": "page",
    "line": 283,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 283,
    "start": 5,
    "end": 6
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 283,
    "start": 6,
    "end": 7
  },
  {
    "type": "ident",
    "val": "fidrst",
    "line": 283,
    "start": 7,
    "end": 13
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 283,
    "start": 13,
    "end": 14
  },
  {
    "type": "ident",
    "val": "firhdst",
    "line": 283,
    "start": 14,
    "end": 21
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 283,
    "start": 21,
    "end": 22
  },
  {
    "type": "ident",
    "val": "fiarst",
    "line": 283,
    "start": 22,
    "end": 28
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 283,
    "start": 28,
    "end": 29
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 283,
    "start": 29,
    "end": 30
  },
  {
    "type": "whitespace",
    "val": "\r\n ",
    "line": 285,
    "start": 30,
    "end": 1
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 285,
    "start": 1,
    "end": 7
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 285,
    "start": 7,
    "end": 8
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 285,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "2",
    "line": 285,
    "start": 9,
    "end": 10,
    "isEpsilon": false,
    "isInt": true,
    "unit": "cm"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 285,
    "start": 12,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 287,
    "start": 13,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 287,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n  ",
    "line": 293,
    "start": 1,
    "end": 2
  },
  {
    "type": "comment",
    "val": "/* @page:first:first {\r\n   margin: 2cm;\r\n } */",
    "line": 293,
    "start": 2,
    "end": 3
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n ",
    "line": 301,
    "start": 5,
    "end": 1
  },
  {
    "type": "comment",
    "val": "/* @supports (display: grid) {\r\n   div {\r\n     display: grid;\r\n   }\r\n }\r\n\r\n @supports not (display: grid) {\r\n   div {\r\n     float: right;\r\n   }\r\n } */",
    "line": 301,
    "start": 1,
    "end": 3
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n\r\n\r\n",
    "line": 333,
    "start": 5,
    "end": 0
  },
  {
    "type": "@",
    "val": "namespace",
    "line": 333,
    "start": 0,
    "end": 10
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 333,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "URL",
    "line": 333,
    "start": 11,
    "end": 14
  },
  {
    "type": "punctation",
    "val": "(",
    "line": 333,
    "start": 14,
    "end": 15
  },
  {
    "type": "string",
    "val": "path-path",
    "line": 333,
    "start": 15,
    "end": 26,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": ")",
    "line": 333,
    "start": 26,
    "end": 27
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 333,
    "start": 27,
    "end": 28
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 335,
    "start": 28,
    "end": 0
  },
  {
    "type": "@",
    "val": "namespace",
    "line": 335,
    "start": 0,
    "end": 10
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 335,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "svg",
    "line": 335,
    "start": 11,
    "end": 14
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 335,
    "start": 14,
    "end": 15
  },
  {
    "type": "ident",
    "val": "url",
    "line": 335,
    "start": 15,
    "end": 18
  },
  {
    "type": "punctation",
    "val": "(",
    "line": 335,
    "start": 18,
    "end": 19
  },
  {
    "type": "string",
    "val": "path-path",
    "line": 335,
    "start": 19,
    "end": 30,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": ")",
    "line": 335,
    "start": 30,
    "end": 31
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 335,
    "start": 31,
    "end": 32
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 337,
    "start": 32,
    "end": 0
  },
  {
    "type": "@",
    "val": "namespace",
    "line": 337,
    "start": 0,
    "end": 10
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 337,
    "start": 10,
    "end": 11
  },
  {
    "type": "ident",
    "val": "prefix",
    "line": 337,
    "start": 11,
    "end": 17
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 337,
    "start": 17,
    "end": 18
  },
  {
    "type": "string",
    "val": "path",
    "line": 337,
    "start": 18,
    "end": 24,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 337,
    "start": 24,
    "end": 25
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 341,
    "start": 25,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @charset \"das\"; */",
    "line": 341,
    "start": 0,
    "end": 19
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 345,
    "start": 21,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #app { */",
    "line": 345,
    "start": 0,
    "end": 10
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 347,
    "start": 12,
    "end": 2
  },
  {
    "type": "comment",
    "val": "/* --main-color: black;\r\n  color: var(--main-color); */",
    "line": 347,
    "start": 2,
    "end": 28
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n  ",
    "line": 353,
    "start": 30,
    "end": 2
  },
  {
    "type": "comment",
    "val": "/* margin: 201e230 20e-20 20e+20 20.23e20; */",
    "line": 353,
    "start": 2,
    "end": 45
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n  ",
    "line": 357,
    "start": 47,
    "end": 2
  },
  {
    "type": "comment",
    "val": "/* we can easily loop and replace each var with the value itself! */",
    "line": 357,
    "start": 2,
    "end": 68
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 359,
    "start": 70,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* } */",
    "line": 359,
    "start": 0,
    "end": 5
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 363,
    "start": 7,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* make it delete smaller to larger in its own visitor? instead of delete all sel/detect in larger? each visitor detect self. then\r\napp can delete itself since empty - we just delete all overriding props on exit, so when it exit seletor, it can see its empty and\r\ndelete self. aka: all nodes check if their ARRAY is empty and if so, deletes self/parnet.arr.splice(idx)? trick is to do on exit and check in visitor itself?\r\ndoenst work when we want to check ANOTHER node and delete this ANOTHER node? only works for self and exit?\r\nmake ALL exit? for smaller to larger delete?  */",
    "line": 363,
    "start": 0,
    "end": 46
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 375,
    "start": 48,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #app {\r\n  margin: 30px;\r\n} */",
    "line": 375,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n",
    "line": 387,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @media only screen and (max-width: inherit) {\r\n  .app {\r\n    padding: 20px;\r\n  }\r\n\r\n  .app {\r\n    padding: 30px;\r\n  }\r\n}\r\n@media only screen and (max-width: inherit) {\r\n  .app {\r\n    padding: 20px;\r\n  }\r\n\r\n  .app {\r\n    padding: 30px;\r\n  }\r\n}\r\n\r\n\r\n\r\n@import \"navigation.css\"  print;\r\n@import url(\"navigation.css\"); */",
    "line": 387,
    "start": 0,
    "end": 31
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "line": 445,
    "start": 33,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* body {\r\n  webkidtd: red calc(32e-23em - 20em + 20px) !important;\r\n  webkdidtd:  50px 20px !important;\r\n}\r\nbody {\r\n  webkidtd:  50px 20px !important;\r\n  webkdidtd:  50px 20px !important;\r\n} */",
    "line": 445,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 463,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* bug. fix. then try \":first:first {\" */",
    "line": 463,
    "start": 0,
    "end": 39
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 465,
    "start": 41,
    "end": 0
  },
  {
    "type": "ident",
    "val": "hda",
    "line": 465,
    "start": 0,
    "end": 3
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 465,
    "start": 3,
    "end": 4
  },
  {
    "type": "ident",
    "val": "first",
    "line": 465,
    "start": 4,
    "end": 9
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 465,
    "start": 9,
    "end": 10
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 465,
    "start": 10,
    "end": 11
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 467,
    "start": 11,
    "end": 2
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 467,
    "start": 2,
    "end": 8
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 467,
    "start": 8,
    "end": 9
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 467,
    "start": 9,
    "end": 10
  },
  {
    "type": "Dimension",
    "val": "2",
    "line": 467,
    "start": 10,
    "end": 11,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 467,
    "start": 13,
    "end": 14
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 469,
    "start": 14,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 469,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n",
    "line": 477,
    "start": 1,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* does textarea sanytinize? its inserted in diff way.. */",
    "line": 477,
    "start": 0,
    "end": 56
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 481,
    "start": 58,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* // the body inside here is not the same */",
    "line": 481,
    "start": 0,
    "end": 43
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 485,
    "start": 45,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* there are shorthand props taht uses -? */",
    "line": 485,
    "start": 0,
    "end": 42
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 489,
    "start": 44,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @media only screen and (max-width: 600px) {\r\n  body {\r\n    background-color: lightblue;\r\n  }\r\n} */",
    "line": 489,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 503,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* is vs isnt preds */",
    "line": 503,
    "start": 0,
    "end": 20
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 507,
    "start": 22,
    "end": 0
  },
  {
    "type": "ident",
    "val": "shadow",
    "line": 507,
    "start": 0,
    "end": 6
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 507,
    "start": 6,
    "end": 7
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 507,
    "start": 7,
    "end": 8
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 507,
    "start": 8,
    "end": 9
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 509,
    "start": 9,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* transform runs after. and comment wasnt kept. so it removes!\r\nif keep commnets, shadow is kept */",
    "line": 509,
    "start": 0,
    "end": 33
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 517,
    "start": 35,
    "end": 0
  },
  {
    "type": "asterisk",
    "val": "*",
    "line": 517,
    "start": 1,
    "end": 1
  },
  {
    "type": "class",
    "val": "daark",
    "line": 517,
    "start": 1,
    "end": 7
  },
  {
    "type": "class",
    "val": "clasd",
    "line": 517,
    "start": 7,
    "end": 13
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 517,
    "start": 13,
    "end": 14
  },
  {
    "type": "combinator",
    "val": ">",
    "line": 517,
    "start": 14,
    "end": 15
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 517,
    "start": 15,
    "end": 16
  },
  {
    "type": "id",
    "val": "namadad",
    "line": 517,
    "start": 16,
    "end": 24
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 517,
    "start": 24,
    "end": 25
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 517,
    "start": 25,
    "end": 26
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 519,
    "start": 26,
    "end": 2
  },
  {
    "type": "ident",
    "val": "pddadding",
    "line": 519,
    "start": 2,
    "end": 11
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 519,
    "start": 11,
    "end": 12
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 519,
    "start": 12,
    "end": 13
  },
  {
    "type": "ident",
    "val": "calc",
    "line": 519,
    "start": 13,
    "end": 17
  },
  {
    "type": "punctation",
    "val": "(",
    "line": 519,
    "start": 17,
    "end": 18
  },
  {
    "type": "Percentage",
    "val": "20",
    "line": 519,
    "start": 18,
    "end": 20,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "combinator",
    "val": ",",
    "line": 519,
    "start": 21,
    "end": 22
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 519,
    "start": 22,
    "end": 23
  },
  {
    "type": "Percentage",
    "val": "30",
    "line": 519,
    "start": 23,
    "end": 25,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "combinator",
    "val": ",",
    "line": 519,
    "start": 26,
    "end": 27
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 519,
    "start": 27,
    "end": 28
  },
  {
    "type": "Dimension",
    "val": "50",
    "line": 519,
    "start": 28,
    "end": 30,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "combinator",
    "val": ",",
    "line": 519,
    "start": 32,
    "end": 33
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 519,
    "start": 33,
    "end": 34
  },
  {
    "type": "num",
    "val": "29",
    "line": 519,
    "start": 34,
    "end": 36,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "punctation",
    "val": ")",
    "line": 519,
    "start": 36,
    "end": 37
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 519,
    "start": 37,
    "end": 38
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 521,
    "start": 38,
    "end": 2
  },
  {
    "type": "ident",
    "val": "path",
    "line": 521,
    "start": 2,
    "end": 6
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 521,
    "start": 6,
    "end": 7
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 521,
    "start": 7,
    "end": 8
  },
  {
    "type": "ident",
    "val": "url",
    "line": 521,
    "start": 8,
    "end": 11
  },
  {
    "type": "punctation",
    "val": "(",
    "line": 521,
    "start": 11,
    "end": 12
  },
  {
    "type": "string",
    "val": "dasd",
    "line": 521,
    "start": 12,
    "end": 18,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": ")",
    "line": 521,
    "start": 18,
    "end": 19
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 521,
    "start": 19,
    "end": 20
  },
  {
    "type": "string",
    "val": "20px",
    "line": 521,
    "start": 20,
    "end": 26,
    "delimiter": "\""
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 521,
    "start": 26,
    "end": 27
  },
  {
    "type": "ident",
    "val": "url",
    "line": 521,
    "start": 27,
    "end": 30
  },
  {
    "type": "punctation",
    "val": "(",
    "line": 521,
    "start": 30,
    "end": 31
  },
  {
    "type": "string",
    "val": "dasd",
    "line": 521,
    "start": 31,
    "end": 37,
    "delimiter": "\""
  },
  {
    "type": "punctation",
    "val": ")",
    "line": 521,
    "start": 37,
    "end": 38
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 521,
    "start": 38,
    "end": 39
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 523,
    "start": 39,
    "end": 2
  },
  {
    "type": "comment",
    "val": "/* pdding: calc(20 - 20); */",
    "line": 523,
    "start": 2,
    "end": 28
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 525,
    "start": 30,
    "end": 2
  },
  {
    "type": "ident",
    "val": "margin",
    "line": 525,
    "start": 2,
    "end": 8
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 525,
    "start": 8,
    "end": 9
  },
  {
    "type": "Dimension",
    "val": "20",
    "line": 525,
    "start": 9,
    "end": 11,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 525,
    "start": 13,
    "end": 14
  },
  {
    "type": "Dimension",
    "val": "20",
    "line": 525,
    "start": 14,
    "end": 16,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 525,
    "start": 18,
    "end": 19
  },
  {
    "type": "Percentage",
    "val": "10",
    "line": 525,
    "start": 19,
    "end": 21,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 525,
    "start": 22,
    "end": 23
  },
  {
    "type": "Dimension",
    "val": "20",
    "line": 525,
    "start": 23,
    "end": 25,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 525,
    "start": 27,
    "end": 28
  },
  {
    "type": "Percentage",
    "val": "10",
    "line": 525,
    "start": 28,
    "end": 30,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 525,
    "start": 31,
    "end": 32
  },
  {
    "type": "num",
    "val": "20",
    "line": 525,
    "start": 32,
    "end": 34,
    "isEpsilon": false,
    "isInt": true
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 525,
    "start": 34,
    "end": 35
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 527,
    "start": 35,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 527,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 531,
    "start": 1,
    "end": 0
  },
  {
    "type": "class",
    "val": "dadrk",
    "line": 531,
    "start": 0,
    "end": 6
  },
  {
    "type": "id",
    "val": "namadad",
    "line": 531,
    "start": 6,
    "end": 14
  },
  {
    "type": "whitespace",
    "val": " ",
    "line": 531,
    "start": 14,
    "end": 15
  },
  {
    "type": "punctation",
    "val": "{",
    "line": 531,
    "start": 15,
    "end": 16
  },
  {
    "type": "whitespace",
    "val": "\r\n  ",
    "line": 533,
    "start": 16,
    "end": 2
  },
  {
    "type": "ident",
    "val": "padding",
    "line": 533,
    "start": 2,
    "end": 9
  },
  {
    "type": "punctation",
    "val": ":",
    "line": 533,
    "start": 9,
    "end": 10
  },
  {
    "type": "Dimension",
    "val": "50",
    "line": 533,
    "start": 10,
    "end": 12,
    "isEpsilon": false,
    "isInt": true,
    "unit": "px"
  },
  {
    "type": "punctation",
    "val": ";",
    "line": 533,
    "start": 14,
    "end": 15
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 535,
    "start": 15,
    "end": 0
  },
  {
    "type": "punctation",
    "val": "}",
    "line": 535,
    "start": 0,
    "end": 1
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 541,
    "start": 1,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* .class {\r\n  margin: 20px 20px 20px 20px;\r\n} */",
    "line": 541,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 547,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #- +- [name*=\"\"] {\r\n  padding: calc(30.0em - 20.0);\r\n  margin: calc(-30.0% * 20.0px);\r\n  color: calc(-30px + 000.20em);\r\n  background: calc(000.09100 / 20.0em);\r\n}\r\n*.class {\r\n  margin: inherit;\r\n}\r\n\r\n#-bame {\r\n  border: 2e3;\r\n  border: --.1px solid red;\r\n  border: +1. ddas   2.2  px solid red;\r\n}\r\n\r\n#\\-naem {\r\n\r\n} */",
    "line": 547,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 589,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* id=\"1bname\" */",
    "line": 589,
    "start": 0,
    "end": 15
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 593,
    "start": 17,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* if more than 6 chars. we ignore, becaue its invalid? when do we check length? */",
    "line": 593,
    "start": 0,
    "end": 81
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 597,
    "start": 83,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* converts - to nan, bceau its parsed as num.  */",
    "line": 597,
    "start": 0,
    "end": 48
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 599,
    "start": 50,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* all other operators are fine thouhg. since they actually parsed as operator */",
    "line": 599,
    "start": 0,
    "end": 79
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 601,
    "start": 81,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* making parsed as op solves it, but.. assoc with num still needed..*/",
    "line": 601,
    "start": 0,
    "end": 69
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 603,
    "start": 71,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* asociate later by token order (or char order just as good me thinks.\r\nthen can check if space aftr - or if num is before or after?), or record if space?  */",
    "line": 603,
    "start": 0,
    "end": 84
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 609,
    "start": 86,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* decide by token stream when in context/fn to know what it is */",
    "line": 609,
    "start": 0,
    "end": 64
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 613,
    "start": 66,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* if pred and parse fn being diff. two ways.  */",
    "line": 613,
    "start": 0,
    "end": 47
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 617,
    "start": 49,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* maybe do it in transform instead?! since thats after as exists. so things are put in correct places? */",
    "line": 617,
    "start": 0,
    "end": 104
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 621,
    "start": 106,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* body.dark, .name {\r\n  codlor: rgb(10, 20, 30);\r\n  margin: 0px 10px;\r\n  height: 0px;\r\n  margin: 0px 10px;\r\n  margin: 0px;\r\n  margin: 0394px 10px;\r\n  margin: 0394 !important;\r\n} */",
    "line": 621,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n\r\n\r\n\r\n",
    "line": 649,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #name .dark {\r\n  padding: 20px;\r\n}\r\n\r\n#name .dark {\r\n  padding: 20px;\r\n} */",
    "line": 649,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 665,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* same element, higher precedence, same prop  */",
    "line": 665,
    "start": 0,
    "end": 47
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 669,
    "start": 49,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* removeDupliSelectors\r\nremoveDupliDeclarations\r\nremoveOverridenDeclarations (selectors) */",
    "line": 669,
    "start": 0,
    "end": 40
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 677,
    "start": 42,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* 30 is parsed? or ignored? 0 dont need unit, since its the same for all. but is 30 parsed as num or ignored? */",
    "line": 677,
    "start": 0,
    "end": 111
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 681,
    "start": 113,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #app.name{} */",
    "line": 681,
    "start": 0,
    "end": 15
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 685,
    "start": 17,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* @media only screen and (max-width: 600px) {\r\n  body {\r\n    background-color: lightblue;\r\n  }\r\n} */",
    "line": 685,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 697,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #name .light {\r\n  padding: 20px;\r\n}\r\n\r\n#name .dark {\r\n  padding: 20px;\r\n} */",
    "line": 697,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 713,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* these have same spec. but refer to different elements, so we cant remove? THEY must target same elements too! ALL the same?\r\nwe cant remove padding for these\r\n\r\nsame path is needed, since only last wont garantee we are targeting the same elements?\r\n\r\n\r\nif selectorPattern same as another selector pattern. we know its the same - so dupli\r\nif keyselector same, we dont overlap for all. unless we check html?\r\n// if selector has SAME name we do what? */",
    "line": 713,
    "start": 0,
    "end": 41
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 735,
    "start": 43,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* %\r\n#project, body .dark {\r\n  border: -.39e+22;\r\n  border: -.49%;\r\n  border: -59;\r\n  background-color: whItesmoke  ;\r\n  border: +-69e-22;\r\n} */",
    "line": 735,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 751,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* why this parsed? inccorect syntax. it delim/removes +? counts as operator? aprses as combinator\r\nnot num. and combinator hit before operaotr. no. but whitespace. when parsed as combi dont get added because wrong scope\r\nwhenparsed as operaotr.. */",
    "line": 751,
    "start": 0,
    "end": 25
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 757,
    "start": 27,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* color: #000000;\r\nbackground: #363636;\r\nbackground-color: #ff3388; */",
    "line": 757,
    "start": 0,
    "end": 27
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 765,
    "start": 29,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* order to exlcude. or make sure EACH one excldue the other, exlude WHAT it cant be, not just allowe waht it CAN.\r\nit needs to exlucde / go past if if not correct - so error validation in that way i guess\r\nthen order dont matter */",
    "line": 765,
    "start": 0,
    "end": 23
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 773,
    "start": 25,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* incomplete url. aka inomcplete string? check for undefined  */",
    "line": 773,
    "start": 0,
    "end": 63
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 775,
    "start": 65,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* makeing to background works fine bacayse other states still not overrdien?\r\nif i remove dupli first dlc, then waht? i can end up removing? no diff args? but color...\r\n\r\nadd minfieir cli api and online\r\n\r\ndeleeDpilieDecl - cant remove if values wastlyful diff? if overriden only 1px border, does the others get reset to def, no!? pretty sure not\r\nso also only delete if argumetn has same number of args! since order must be same. dont need to check if same value type\r\ndeleteOVerridenDecl due to precedence\r\n\r\n\r\nfrom dt to dt - convert fns . compiler is that, just over many transform steps! */",
    "line": 775,
    "start": 0,
    "end": 80
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 799,
    "start": 82,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* endless loop = dont skip past. get stuck checking the same char. */",
    "line": 799,
    "start": 0,
    "end": 68
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 803,
    "start": 70,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* test ident names too */",
    "line": 803,
    "start": 0,
    "end": 24
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 805,
    "start": 26,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* --transition: 23;  */",
    "line": 805,
    "start": 0,
    "end": 22
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 807,
    "start": 24,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* -transition: 23;  */",
    "line": 807,
    "start": 0,
    "end": 21
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 809,
    "start": 23,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* -1transition: 23;  */",
    "line": 809,
    "start": 0,
    "end": 22
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 811,
    "start": 24,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* 1transition: 23;  */",
    "line": 811,
    "start": 0,
    "end": 21
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 815,
    "start": 23,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* color: rgb(20, 30, 4); - cannot read property val of undefined. url: cannot understand type in traverser */",
    "line": 815,
    "start": 0,
    "end": 108
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 817,
    "start": 110,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* shoudl make white #fff - change ffffff in map to shortest, should solve ALL */",
    "line": 817,
    "start": 0,
    "end": 79
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 821,
    "start": 81,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* // printing process is like loging? */",
    "line": 821,
    "start": 0,
    "end": 39
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 823,
    "start": 41,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* dont expose tokenizer in parsr? i wont to print, but dotn want user to aceces. should be priv? */",
    "line": 823,
    "start": 0,
    "end": 98
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n",
    "line": 827,
    "start": 100,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* #id {\r\n  width: 20px;\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 30px;\r\n} */",
    "line": 827,
    "start": 0,
    "end": 2
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 839,
    "start": 4,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* open with keyprtess, or cmd, todo o  f project - how?\r\nit ignores stuff written here? thinks its a selector? */",
    "line": 839,
    "start": 0,
    "end": 54
  },
  {
    "type": "whitespace",
    "val": "\r\n\r\n\r\n",
    "line": 847,
    "start": 56,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* this might target elements the other dont. we cant tell by selector. but SOME html elements will be affected by it */",
    "line": 847,
    "start": 0,
    "end": 118
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 849,
    "start": 120,
    "end": 0
  },
  {
    "type": "comment",
    "val": "/* check that still same spec with > */",
    "line": 849,
    "start": 0,
    "end": 37
  },
  {
    "type": "whitespace",
    "val": "\r\n",
    "line": 851,
    "start": 39,
    "end": 0
  }
]